"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const logger_1 = require("@aws-lambda-powertools/logger");
const tracer_1 = require("@aws-lambda-powertools/tracer");
const client_sqs_1 = require("@aws-sdk/client-sqs");
const hono_1 = require("hono");
const aws_lambda_1 = require("hono/aws-lambda");
const bearer_auth_1 = require("hono/bearer-auth");
/** AWS region */
const region = process.env.AWS_REGION;
/** SQS queue URL */
const queueUrl = process.env.QUEUE_URL;
/** Bearer token */
const token = process.env.API_KEY;
const logger = new logger_1.Logger();
const tracer = new tracer_1.Tracer();
const sqs = tracer.captureAWSv3Client(new client_sqs_1.SQSClient({ region }));
/**
 * Send message to SQS
 * @param message webhook event
 * @returns void
 */
const enqueue = async (message) => {
    const cmd = new client_sqs_1.SendMessageCommand({
        QueueUrl: queueUrl,
        MessageBody: JSON.stringify(message),
    });
    const output = await sqs.send(cmd);
    return output;
};
/** Hono app */
const app = new hono_1.Hono();
/** Webhook endpoint */
app.post('/', (0, bearer_auth_1.bearerAuth)({ token }), async (c) => {
    const body = await c.req.json();
    console.log(JSON.stringify(body));
    await enqueue(body);
    return c.text('Accepted', 202);
});
/** Lambda handler */
exports.handler = (0, aws_lambda_1.handle)(app);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBpLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3N1cGFiYXNlLWNkbi9jYWNoZS1tYW5hZ2VyL2FwaS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBdUQ7QUFDdkQsMERBQXVEO0FBQ3ZELG9EQUFvRTtBQUVwRSwrQkFBNEI7QUFDNUIsZ0RBQXlDO0FBQ3pDLGtEQUE4QztBQUc5QyxpQkFBaUI7QUFDakIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUM7QUFDdEMsb0JBQW9CO0FBQ3BCLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDO0FBQ3ZDLG1CQUFtQjtBQUNuQixNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLE9BQVEsQ0FBQztBQUVuQyxNQUFNLE1BQU0sR0FBRyxJQUFJLGVBQU0sRUFBRSxDQUFDO0FBQzVCLE1BQU0sTUFBTSxHQUFHLElBQUksZUFBTSxFQUFFLENBQUM7QUFDNUIsTUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksc0JBQVMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztBQUVqRTs7OztHQUlHO0FBQ0gsTUFBTSxPQUFPLEdBQUcsS0FBSyxFQUFFLE9BQWUsRUFBRSxFQUFFO0lBQ3hDLE1BQU0sR0FBRyxHQUFHLElBQUksK0JBQWtCLENBQUM7UUFDakMsUUFBUSxFQUFFLFFBQVE7UUFDbEIsV0FBVyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDO0tBQ3JDLENBQUMsQ0FBQztJQUNILE1BQU0sTUFBTSxHQUFHLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUNuQyxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDLENBQUM7QUFFRixlQUFlO0FBQ2YsTUFBTSxHQUFHLEdBQUcsSUFBSSxXQUFJLEVBQUUsQ0FBQztBQUV2Qix1QkFBdUI7QUFDdkIsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBQSx3QkFBVSxFQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEVBQUU7SUFDL0MsTUFBTSxJQUFJLEdBQWlCLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUM5QyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUVsQyxNQUFNLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNwQixPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ2pDLENBQUMsQ0FBQyxDQUFDO0FBRUgscUJBQXFCO0FBQ1IsUUFBQSxPQUFPLEdBQUcsSUFBQSxtQkFBTSxFQUFDLEdBQUcsQ0FBWSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnQGF3cy1sYW1iZGEtcG93ZXJ0b29scy9sb2dnZXInO1xyXG5pbXBvcnQgeyBUcmFjZXIgfSBmcm9tICdAYXdzLWxhbWJkYS1wb3dlcnRvb2xzL3RyYWNlcic7XHJcbmltcG9ydCB7IFNRU0NsaWVudCwgU2VuZE1lc3NhZ2VDb21tYW5kIH0gZnJvbSAnQGF3cy1zZGsvY2xpZW50LXNxcyc7XHJcbmltcG9ydCB7IEhhbmRsZXIgfSBmcm9tICdhd3MtbGFtYmRhJztcclxuaW1wb3J0IHsgSG9ubyB9IGZyb20gJ2hvbm8nO1xyXG5pbXBvcnQgeyBoYW5kbGUgfSBmcm9tICdob25vL2F3cy1sYW1iZGEnO1xyXG5pbXBvcnQgeyBiZWFyZXJBdXRoIH0gZnJvbSAnaG9uby9iZWFyZXItYXV0aCc7XHJcbmltcG9ydCB7IFdlYmhvb2tFdmVudCB9IGZyb20gJy4vdHlwZXMnO1xyXG5cclxuLyoqIEFXUyByZWdpb24gKi9cclxuY29uc3QgcmVnaW9uID0gcHJvY2Vzcy5lbnYuQVdTX1JFR0lPTjtcclxuLyoqIFNRUyBxdWV1ZSBVUkwgKi9cclxuY29uc3QgcXVldWVVcmwgPSBwcm9jZXNzLmVudi5RVUVVRV9VUkw7XHJcbi8qKiBCZWFyZXIgdG9rZW4gKi9cclxuY29uc3QgdG9rZW4gPSBwcm9jZXNzLmVudi5BUElfS0VZITtcclxuXHJcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoKTtcclxuY29uc3QgdHJhY2VyID0gbmV3IFRyYWNlcigpO1xyXG5jb25zdCBzcXMgPSB0cmFjZXIuY2FwdHVyZUFXU3YzQ2xpZW50KG5ldyBTUVNDbGllbnQoeyByZWdpb24gfSkpO1xyXG5cclxuLyoqXHJcbiAqIFNlbmQgbWVzc2FnZSB0byBTUVNcclxuICogQHBhcmFtIG1lc3NhZ2Ugd2ViaG9vayBldmVudFxyXG4gKiBAcmV0dXJucyB2b2lkXHJcbiAqL1xyXG5jb25zdCBlbnF1ZXVlID0gYXN5bmMgKG1lc3NhZ2U6IG9iamVjdCkgPT4ge1xyXG4gIGNvbnN0IGNtZCA9IG5ldyBTZW5kTWVzc2FnZUNvbW1hbmQoe1xyXG4gICAgUXVldWVVcmw6IHF1ZXVlVXJsLFxyXG4gICAgTWVzc2FnZUJvZHk6IEpTT04uc3RyaW5naWZ5KG1lc3NhZ2UpLFxyXG4gIH0pO1xyXG4gIGNvbnN0IG91dHB1dCA9IGF3YWl0IHNxcy5zZW5kKGNtZCk7XHJcbiAgcmV0dXJuIG91dHB1dDtcclxufTtcclxuXHJcbi8qKiBIb25vIGFwcCAqL1xyXG5jb25zdCBhcHAgPSBuZXcgSG9ubygpO1xyXG5cclxuLyoqIFdlYmhvb2sgZW5kcG9pbnQgKi9cclxuYXBwLnBvc3QoJy8nLCBiZWFyZXJBdXRoKHsgdG9rZW4gfSksIGFzeW5jIChjKSA9PiB7XHJcbiAgY29uc3QgYm9keTogV2ViaG9va0V2ZW50ID0gYXdhaXQgYy5yZXEuanNvbigpO1xyXG4gIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGJvZHkpKTtcclxuXHJcbiAgYXdhaXQgZW5xdWV1ZShib2R5KTtcclxuICByZXR1cm4gYy50ZXh0KCdBY2NlcHRlZCcsIDIwMik7XHJcbn0pO1xyXG5cclxuLyoqIExhbWJkYSBoYW5kbGVyICovXHJcbmV4cG9ydCBjb25zdCBoYW5kbGVyID0gaGFuZGxlKGFwcCkgYXMgSGFuZGxlcjtcclxuIl19