"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const logger_1 = require("@aws-lambda-powertools/logger");
const tracer_1 = require("@aws-lambda-powertools/tracer");
const client_cloudfront_1 = require("@aws-sdk/client-cloudfront");
const distributionId = process.env.DISTRIBUTION_ID;
const logger = new logger_1.Logger();
const tracer = new tracer_1.Tracer();
const cloudfront = tracer.captureAWSv3Client(new client_cloudfront_1.CloudFrontClient({ region: 'us-east-1' }));
/** Create CloudFront invalidation. */
const createInvalidation = async (paths, callerReference) => {
    const cmd = new client_cloudfront_1.CreateInvalidationCommand({
        DistributionId: distributionId,
        InvalidationBatch: {
            Paths: {
                Items: paths,
                Quantity: paths.length,
            },
            CallerReference: callerReference,
        },
    });
    const output = await cloudfront.send(cmd);
    return output;
};
/** Convert webhook event to CloudFront paths. */
const eventToPath = (event) => {
    const bucketId = event.event.payload.bucketId;
    const objectName = event.event.payload.name;
    const objectPaths = [
        `/storage/v1/object/${bucketId}/${objectName}*`,
        `/storage/v1/object/sign/${bucketId}/${objectName}*`,
        `/storage/v1/object/public/${bucketId}/${objectName}*`,
    ];
    return objectPaths;
};
const handler = async (event, context) => {
    const webhookEvents = event.Records.map(record => JSON.parse(record.body));
    const paths = webhookEvents.flatMap(eventToPath);
    const output = await createInvalidation(paths, context.awsRequestId);
    logger.info('Create invalidation successfully.', { output });
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicXVldWUtY29uc3VtZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvc3VwYWJhc2UtY2RuL2NhY2hlLW1hbmFnZXIvcXVldWUtY29uc3VtZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsMERBQXVEO0FBQ3ZELDBEQUF1RDtBQUN2RCxrRUFBeUY7QUFJekYsTUFBTSxjQUFjLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFnQixDQUFDO0FBRXBELE1BQU0sTUFBTSxHQUFHLElBQUksZUFBTSxFQUFFLENBQUM7QUFDNUIsTUFBTSxNQUFNLEdBQUcsSUFBSSxlQUFNLEVBQUUsQ0FBQztBQUM1QixNQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsa0JBQWtCLENBQUMsSUFBSSxvQ0FBZ0IsQ0FBQyxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDLENBQUM7QUFFNUYsc0NBQXNDO0FBQ3RDLE1BQU0sa0JBQWtCLEdBQUcsS0FBSyxFQUFDLEtBQWUsRUFBRSxlQUF1QixFQUFFLEVBQUU7SUFDM0UsTUFBTSxHQUFHLEdBQUcsSUFBSSw2Q0FBeUIsQ0FBQztRQUN4QyxjQUFjLEVBQUUsY0FBYztRQUM5QixpQkFBaUIsRUFBRTtZQUNqQixLQUFLLEVBQUU7Z0JBQ0wsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osUUFBUSxFQUFFLEtBQUssQ0FBQyxNQUFNO2FBQ3ZCO1lBQ0QsZUFBZSxFQUFFLGVBQWU7U0FDakM7S0FDRixDQUFDLENBQUM7SUFDSCxNQUFNLE1BQU0sR0FBRyxNQUFNLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDMUMsT0FBTyxNQUFNLENBQUM7QUFDaEIsQ0FBQyxDQUFDO0FBRUYsaURBQWlEO0FBQ2pELE1BQU0sV0FBVyxHQUFHLENBQUMsS0FBbUIsRUFBWSxFQUFFO0lBQ3BELE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztJQUM5QyxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDNUMsTUFBTSxXQUFXLEdBQUc7UUFDbEIsc0JBQXNCLFFBQVEsSUFBSSxVQUFVLEdBQUc7UUFDL0MsMkJBQTJCLFFBQVEsSUFBSSxVQUFVLEdBQUc7UUFDcEQsNkJBQTZCLFFBQVEsSUFBSSxVQUFVLEdBQUc7S0FDdkQsQ0FBQztJQUNGLE9BQU8sV0FBVyxDQUFDO0FBQ3JCLENBQUMsQ0FBQztBQUVLLE1BQU0sT0FBTyxHQUFlLEtBQUssRUFBRSxLQUFLLEVBQUUsT0FBTyxFQUFFLEVBQUU7SUFDMUQsTUFBTSxhQUFhLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQWlCLENBQUMsQ0FBQztJQUMzRixNQUFNLEtBQUssR0FBRyxhQUFhLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ2pELE1BQU0sTUFBTSxHQUFHLE1BQU0sa0JBQWtCLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUNyRSxNQUFNLENBQUMsSUFBSSxDQUFDLG1DQUFtQyxFQUFFLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUMvRCxDQUFDLENBQUM7QUFMVyxRQUFBLE9BQU8sV0FLbEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBMb2dnZXIgfSBmcm9tICdAYXdzLWxhbWJkYS1wb3dlcnRvb2xzL2xvZ2dlcic7XHJcbmltcG9ydCB7IFRyYWNlciB9IGZyb20gJ0Bhd3MtbGFtYmRhLXBvd2VydG9vbHMvdHJhY2VyJztcclxuaW1wb3J0IHsgQ2xvdWRGcm9udENsaWVudCwgQ3JlYXRlSW52YWxpZGF0aW9uQ29tbWFuZCB9IGZyb20gJ0Bhd3Mtc2RrL2NsaWVudC1jbG91ZGZyb250JztcclxuaW1wb3J0IHsgU1FTSGFuZGxlciB9IGZyb20gJ2F3cy1sYW1iZGEnO1xyXG5pbXBvcnQgeyBXZWJob29rRXZlbnQgfSBmcm9tICcuL3R5cGVzJztcclxuXHJcbmNvbnN0IGRpc3RyaWJ1dGlvbklkID0gcHJvY2Vzcy5lbnYuRElTVFJJQlVUSU9OX0lEITtcclxuXHJcbmNvbnN0IGxvZ2dlciA9IG5ldyBMb2dnZXIoKTtcclxuY29uc3QgdHJhY2VyID0gbmV3IFRyYWNlcigpO1xyXG5jb25zdCBjbG91ZGZyb250ID0gdHJhY2VyLmNhcHR1cmVBV1N2M0NsaWVudChuZXcgQ2xvdWRGcm9udENsaWVudCh7IHJlZ2lvbjogJ3VzLWVhc3QtMScgfSkpO1xyXG5cclxuLyoqIENyZWF0ZSBDbG91ZEZyb250IGludmFsaWRhdGlvbi4gKi9cclxuY29uc3QgY3JlYXRlSW52YWxpZGF0aW9uID0gYXN5bmMocGF0aHM6IHN0cmluZ1tdLCBjYWxsZXJSZWZlcmVuY2U6IHN0cmluZykgPT4ge1xyXG4gIGNvbnN0IGNtZCA9IG5ldyBDcmVhdGVJbnZhbGlkYXRpb25Db21tYW5kKHtcclxuICAgIERpc3RyaWJ1dGlvbklkOiBkaXN0cmlidXRpb25JZCxcclxuICAgIEludmFsaWRhdGlvbkJhdGNoOiB7XHJcbiAgICAgIFBhdGhzOiB7XHJcbiAgICAgICAgSXRlbXM6IHBhdGhzLFxyXG4gICAgICAgIFF1YW50aXR5OiBwYXRocy5sZW5ndGgsXHJcbiAgICAgIH0sXHJcbiAgICAgIENhbGxlclJlZmVyZW5jZTogY2FsbGVyUmVmZXJlbmNlLFxyXG4gICAgfSxcclxuICB9KTtcclxuICBjb25zdCBvdXRwdXQgPSBhd2FpdCBjbG91ZGZyb250LnNlbmQoY21kKTtcclxuICByZXR1cm4gb3V0cHV0O1xyXG59O1xyXG5cclxuLyoqIENvbnZlcnQgd2ViaG9vayBldmVudCB0byBDbG91ZEZyb250IHBhdGhzLiAqL1xyXG5jb25zdCBldmVudFRvUGF0aCA9IChldmVudDogV2ViaG9va0V2ZW50KTogc3RyaW5nW10gPT4ge1xyXG4gIGNvbnN0IGJ1Y2tldElkID0gZXZlbnQuZXZlbnQucGF5bG9hZC5idWNrZXRJZDtcclxuICBjb25zdCBvYmplY3ROYW1lID0gZXZlbnQuZXZlbnQucGF5bG9hZC5uYW1lO1xyXG4gIGNvbnN0IG9iamVjdFBhdGhzID0gW1xyXG4gICAgYC9zdG9yYWdlL3YxL29iamVjdC8ke2J1Y2tldElkfS8ke29iamVjdE5hbWV9KmAsXHJcbiAgICBgL3N0b3JhZ2UvdjEvb2JqZWN0L3NpZ24vJHtidWNrZXRJZH0vJHtvYmplY3ROYW1lfSpgLFxyXG4gICAgYC9zdG9yYWdlL3YxL29iamVjdC9wdWJsaWMvJHtidWNrZXRJZH0vJHtvYmplY3ROYW1lfSpgLFxyXG4gIF07XHJcbiAgcmV0dXJuIG9iamVjdFBhdGhzO1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGhhbmRsZXI6IFNRU0hhbmRsZXIgPSBhc3luYyAoZXZlbnQsIGNvbnRleHQpID0+IHtcclxuICBjb25zdCB3ZWJob29rRXZlbnRzID0gZXZlbnQuUmVjb3Jkcy5tYXAocmVjb3JkID0+IEpTT04ucGFyc2UocmVjb3JkLmJvZHkpIGFzIFdlYmhvb2tFdmVudCk7XHJcbiAgY29uc3QgcGF0aHMgPSB3ZWJob29rRXZlbnRzLmZsYXRNYXAoZXZlbnRUb1BhdGgpO1xyXG4gIGNvbnN0IG91dHB1dCA9IGF3YWl0IGNyZWF0ZUludmFsaWRhdGlvbihwYXRocywgY29udGV4dC5hd3NSZXF1ZXN0SWQpO1xyXG4gIGxvZ2dlci5pbmZvKCdDcmVhdGUgaW52YWxpZGF0aW9uIHN1Y2Nlc3NmdWxseS4nLCB7IG91dHB1dCB9KTtcclxufTtcclxuIl19