"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.handler = void 0;
const client_secrets_manager_1 = require("@aws-sdk/client-secrets-manager");
const client_workmail_1 = require("@aws-sdk/client-workmail");
const getSecretValue = async (secretId) => {
    const client = new client_secrets_manager_1.SecretsManagerClient({});
    const cmd = new client_secrets_manager_1.GetSecretValueCommand({ SecretId: secretId });
    let secretString;
    try {
        const output = await client.send(cmd);
        secretString = output.SecretString;
    }
    catch (err) {
        console.error(err);
        throw err;
    }
    finally {
        client.destroy();
    }
    const value = JSON.parse(secretString);
    return value;
};
/** Describe the email domain of the WorkMail organization */
const describeMailDomain = async (region, organizationId) => {
    const client = new client_workmail_1.WorkMailClient({ region });
    const cmd = new client_workmail_1.DescribeOrganizationCommand({ OrganizationId: organizationId });
    let mailDomain;
    try {
        const output = await client.send(cmd);
        mailDomain = output.DefaultMailDomain;
    }
    catch (err) {
        console.error(err);
        throw err;
    }
    finally {
        client.destroy();
    }
    return mailDomain;
};
/** Register the email address to the WorkMail organization */
const registerToWorkMail = async (region, organizationId, entityId, email) => {
    const client = new client_workmail_1.WorkMailClient({ region });
    const cmd = new client_workmail_1.RegisterToWorkMailCommand({
        OrganizationId: organizationId,
        EntityId: entityId,
        Email: email,
    });
    try {
        await client.send(cmd);
    }
    catch (err) {
        console.error(err);
        throw err;
    }
    finally {
        client.destroy();
    }
};
/** Deregister the email address to the WorkMail organization */
const deregisterFromWorkMail = async (region, organizationId, entityId) => {
    const client = new client_workmail_1.WorkMailClient({ region });
    const cmd = new client_workmail_1.DeregisterFromWorkMailCommand({
        OrganizationId: organizationId,
        EntityId: entityId,
    });
    try {
        await client.send(cmd);
    }
    catch (err) {
        console.error(err);
        throw err;
    }
    finally {
        client.destroy();
    }
};
/** Create the user from the WorkMail organization */
const createUser = async (region, organizationId, username, password) => {
    const mailDomain = await describeMailDomain(region, organizationId);
    const email = `${username.toLowerCase()}@${mailDomain}`;
    const client = new client_workmail_1.WorkMailClient({ region });
    const cmd = new client_workmail_1.CreateUserCommand({
        OrganizationId: organizationId,
        Name: username,
        Password: password,
        DisplayName: username,
    });
    let userId;
    try {
        const output = await client.send(cmd);
        userId = output.UserId;
    }
    catch (err) {
        console.error(err);
        throw err;
    }
    finally {
        client.destroy();
    }
    await registerToWorkMail(region, organizationId, userId, email);
    return { userId, email };
};
/** Delete the user from the WorkMail organization */
const deleteUser = async (region, organizationId, userId) => {
    const client = new client_workmail_1.WorkMailClient({ region });
    await deregisterFromWorkMail(region, organizationId, userId);
    const cmd = new client_workmail_1.DeleteUserCommand({
        OrganizationId: organizationId,
        UserId: userId,
    });
    try {
        await client.send(cmd);
    }
    catch (err) {
        console.error(err);
        throw err;
    }
    finally {
        client.destroy();
    }
};
const handler = async (event, _context) => {
    const region = event.ResourceProperties.Region;
    const organizationId = event.ResourceProperties.OrganizationId;
    const username = event.ResourceProperties.Username;
    const password = event.ResourceProperties.Password;
    switch (event.RequestType) {
        case 'Create': {
            const user = await createUser(region, organizationId, username, password);
            return { PhysicalResourceId: user.userId, Data: { UserId: user.userId, Email: user.email } };
        }
        case 'Update': {
            const oldUserId = event.PhysicalResourceId;
            await deleteUser(region, organizationId, oldUserId);
            const user = await createUser(region, organizationId, username, password);
            return { PhysicalResourceId: user.userId, Data: { UserId: user.userId, Email: user.email } };
        }
        case 'Delete': {
            const userId = event.PhysicalResourceId;
            await deleteUser(region, organizationId, userId);
            return {};
        }
    }
    ;
};
exports.handler = handler;
//# sourceMappingURL=data:application/json;base64,